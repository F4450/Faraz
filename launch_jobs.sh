#!/bin/bash -x

CPU_IMAGE="sampyash_vt_cs_6604_digital_libraries_deepfigures_cpu_0.0.6-2020-02-17-0b0913cc3608.simg"
GPU_IMAGE=""
NUM_CPUS=$(lscpu | grep "CPU(s)" | head -1 | awk -F' ' '{print $2}')

# Returns current timestamp.
current_timestamp() {
  date "+%Y_%m_%d_%T"
}

for i in {1..27}; do
  echo "Iteration $i"
  echo "-------------"
  # Copy the model weights generated by the previous iteration to a safe location.
  if ls "$WORK"/deepfigures-results/pmctable_arxiv_combined* 1>/dev/null 2>&1; then
    echo "Previous model exists."
    LATEST_MODEL_DIR=$(ls -dt $WORK/deepfigures-results/pmctable_arxiv_combined* | head -1)

    # Copying the weights (meta) from the previous checkpoint to the weights directory.
    LATEST_META_FILE=$(ls -t "$LATEST_MODEL_DIR/*.meta" | head -1)
    echo "Copying the weights from $LATEST_META_FILE to $WORK/deepfigures-results/weights/save.ckpt-500000.meta"
    rm "$WORK/deepfigures-results/weights/*.meta"
    cp "$LATEST_META_FILE" "$WORK"/deepfigures-results/weights/save.ckpt-500000.meta

    # Copying the weights (index) from the previous checkpoint to the weights directory.
    LATEST_INDEX_FILE=$(ls -t "$LATEST_MODEL_DIR/*.index" | head -1)
    echo "Copying the weights from $LATEST_INDEX_FILE to $WORK/deepfigures-results/weights/save.ckpt-500000.index"
    rm "$WORK/deepfigures-results/weights/*.index"
    cp "$LATEST_INDEX_FILE" "$WORK"/deepfigures-results/weights/save.ckpt-500000.index

    # Copying the weights (data) from the previous checkpoint to the weights directory.
    LATEST_DATA_FILE=$(ls -t "$LATEST_MODEL_DIR/*.data*" | head -1)
    echo "Copying the weights from LATEST_DATA_FILE to $WORK/deepfigures-results/weights/save.ckpt-500000.data-00000-of-00001"
    rm "$WORK"/deepfigures-results/weights/*.data*
    cp "$LATEST_DATA_FILE" "$WORK"/deepfigures-results/weights/save.ckpt-500000.data-00000-of-00001

    echo "Moving the previous model to the checkpoints directory. Model name: $LATEST_MODEL_DIR"
    mv "$WORK"/deepfigures-results/"$LATEST_MODEL_DIR" "$WORK"/deepfigures-results/model_checkpoints
    echo "Previous model moved successfully."

    echo "Moving the figure jsons to the model checkpoint directory of the corresponding model."
    [ -f "$WORK"/deepfigures-results/figure_boundaries.json ] && mv "$WORK"/deepfigures-results/figure_boundaries.json "$LATEST_MODEL_DIR"
    [ -f "$WORK"/deepfigures-results/figure_boundaries_train.json ] && mv "$WORK"/deepfigures-results/figure_boundaries_train.json "$LATEST_MODEL_DIR"
    [ -f "$WORK"/deepfigures-results/figure_boundaries_test.json ] && mv "$WORK"/deepfigures-results/figure_boundaries_test.json "$LATEST_MODEL_DIR"
  else
    echo "No previous model found."
    rm -f "$WORK"/deepfigures-results/figure_boundaries.json
    rm -f "$WORK"/deepfigures-results/figure_boundaries_train.json
    rm -f "$WORK"/deepfigures-results/figure_boundaries_test.json
  fi

  # clean up the files generated by the previous iterations.
  echo "Emptying $WORK/deepfigures-results/arxiv_data_output and  $WORK/deepfigures-results/arxiv_data_output using GNU parallel."
  rm -f "$WORK"/deepfigures-results/to_be_deleted.txt
  ls -d "$WORK"/deepfigures-results/arxiv_data_output/* "$WORK"/deepfigures-results/arxiv_data_temp/* >"$WORK"/deepfigures-results/to_be_deleted.txt
  parallel -j "$NUM_CPUS" --progress --no-notice -a "$WORK"/deepfigures-results/to_be_deleted.txt rm -rf
  echo "Again calling the rm -rf command just to be sure."
  rm -rf "$WORK"/deepfigures-results/arxiv_data_temp/*
  rm -rf "$WORK"/deepfigures-results/arxiv_data_output/*

  # Preparing the list of files for training.
  echo "Copying /home/sampanna/df/files_$i.json to $WORK/deepfigures-results/files_$i.json"
  cp /home/sampanna/df/files_$i.json "$WORK"/deepfigures-results/files_$i.json
  echo "Renaing $WORK/deepfigures-results/files_0.json to $WORK/deepfigures-results/files.json"
  mv "$WORK"/deepfigures-results/files_0.json "$WORK"/deepfigures-results/files.json

  # Generate the data.
  singularity exec -B "$WORK"/deepfigures-results:/work/host-output -B "$WORK"/deepfigures-results:/work/host-input /work/cascades/sampanna/singularity/$CPU_IMAGE python /work/deepfigures/data_generation/arxiv_pipeline.py

  # Prepare the figure_boundaries.json file.
  singularity exec -B "$WORK"/deepfigures-results:/work/host-output -B "$WORK"/deepfigures-results:/work/host-input /work/cascades/sampanna/singularity/$CPU_IMAGE python /work/figure_json_transformer.py
  singularity exec -B "$WORK"/deepfigures-results:/work/host-output -B "$WORK"/deepfigures-results:/work/host-input /work/cascades/sampanna/singularity/$CPU_IMAGE python /work/figure_boundaries_train_test_split.py

  # Trigger the training.
  # The timeout command will kill the training after 5 hours.
  timeout --preserve-status 5h  singularity exec --nv -B "$WORK"/deepfigures-results:/work/host-output -B "$WORK"/deepfigures-results:/work/host-input /work/cascades/sampanna/singularity/$GPU_IMAGE python /work/vendor/tensorboxresnet/tensorboxresnet/train.py --hypes /work/host-input/weights/hypes.json --gpu 0 --logdir /work/host-output
done
